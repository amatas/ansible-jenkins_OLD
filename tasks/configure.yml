---

# Jenkins comes with bundled plugins that get priority during deployment. This
# means that any newer version of a bundled plugin that gets downloaded to
# ~/plugins will be ignored and replaced with the bundled version the next
# time Jenkins is restarted.
#
# A workaround is to download a newer version and pin it (create a .pinned
# file). In this case Jenkins will not atempt to overwrite the newer version.
#
# Pinning a plugin does not mean that newer versions will get ignored. The
# pluginManager will continue to check for newer version and make them avai-
# lable through the web interface.

- name: Enable and start Jenkins
  service:
    name: jenkins
    enabled: yes
    state: started

- name: Wait for Jenkins to be ready
  shell: curl -D - --silent http://localhost:8080/cli/
  register: result
  until: >
    ((result.stdout.find("200 OK") != -1) or
    (result.stdout.find("Authentication required") != -1)) and
    (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_conn_retries }}"
  delay: "{{ jenkins_conn_delay }}"
  changed_when: false
 
- name: Get list of currently installed plugins
  shell: "java -jar {{ jenkins_cli_jar }} -s http://localhost:{{ jenkins_port }}/ list-plugins {{ jenkins_admin_credentials }} | awk '{ print $1 }'"
  register: plugin_list

- name: Install additional plugins and update everything
  get_url:
    dest: "{{ jenkins_home }}/plugins/{{ item }}.jpi"
    url: "{{ jenkins_updates_url }}/latest/{{ item }}.hpi"
    force: yes
    owner: "{{ jenkins_user }}"
  with_items:
    - "{{ plugin_list.stdout_lines }}"
    - "{{ jenkins_plugins }}"
  notify:
    - restart jenkins

- name: Pin all plugins to avoid bundled versions getting reinstalled
  file:
    path: "{{ jenkins_home }}/plugins/{{ item }}.jpi.pinned"
    state: touch
    owner: "{{ jenkins_user }}"
  with_items:
    - "{{ plugin_list.stdout_lines }}"
    - "{{ jenkins_plugins }}"
  notify:
    - restart jenkins

- name: Generate temporary file
  command: /usr/bin/mktemp
  register: mktemp

- name: Transfer Groovy script used for security configuration
  template:
    src: security.gy.j2
    dest: "{{ mktemp.stdout }}"
    backup: no

- name: Enable matrix-based security and create administrators
  shell: "java -jar {{ jenkins_cli_jar }} -s http://localhost:{{ jenkins_port}}/ groovy {{ mktemp.stdout }}"
  register: jenkins_security
  ignore_errors: True

- name: Enable matrix-based security and create administrators
  shell: "java -jar {{ jenkins_cli_jar }} -s http://localhost:{{ jenkins_port}}/ groovy {{ mktemp.stdout }} {{ jenkins_admin_credentials }}"
  when: jenkins_security.stderr.find("hudson.security.AccessDeniedException2") != -1

- name: Remove Groovy script
  file:
    path: "{{ mktemp.stdout }}"
    state: absent

- name: Check if docker package is installed
  command: rpm -q docker-engine
  register: docker_pkg

- name: Add Jenkins to docker group
  user:
    name: jenkins
    groups: docker
    append: yes
  when: "'docker-commons' in jenkins_plugins and docker_pkg.stdout.find('is not installed') == -1"
  notify:
    - restart jenkins

- name: Restart Jenkins to create plugins config files
  service:
    name: jenkins
    state: restarted
  when: "'docker-commons' in jenkins_plugins and docker_pkg.stdout.find('is not installed') == -1"

- name: Wait for Jenkins to be ready
  shell: curl -D - --silent http://localhost:8080/cli/
  register: result
  until: >
    ((result.stdout.find("200 OK") != -1) or
    (result.stdout.find("Authentication required") != -1)) and
    (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_conn_retries }}"
  delay: "{{ jenkins_conn_delay }}"
  changed_when: false

- name: Check if DockerBuilder xml config file exists
  stat:
    path: /var/lib/jenkins/org.jenkinsci.plugins.dockerbuildstep.DockerBuilder.xml
  register: dockerbuilder_file

- name: Transfer DockerBuilder xml config file
  copy:
    src: dockerbuilder.xml
    dest: /var/lib/jenkins/org.jenkinsci.plugins.dockerbuildstep.DockerBuilder.xml
    owner: jenkins
  when:
    dockerbuilder_file.stat.exists == False and
    'docker-commons' in jenkins_plugins and
    docker_pkg.stdout.find('is not installed') == -1

- name: Configure docker plugin
  xml:
    file: /var/lib/jenkins/org.jenkinsci.plugins.dockerbuildstep.DockerBuilder.xml
    xpath: /org.jenkinsci.plugins.dockerbuildstep.DockerBuilder_-DescriptorImpl/dockerUrl
    value: unix:///var/run/docker.sock
  when: "'docker-commons' in jenkins_plugins and docker_pkg.stdout.find('is not installed') == -1"
  notify:
    - restart jenkins

